server {
    listen 80;
    server_name localhost;

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    location /service1 {
        auth_request /auth;
        auth_request_set $auth_status $upstream_status;
        error_page 401 = @unauthorized;
        proxy_set_header Host $http_host;
        proxy_pass http://backend:8000/service1/;
    }

    location /service2 {
        auth_request /auth;
        auth_request_set $auth_status $upstream_status;
        error_page 401 = @unauthorized;
        proxy_set_header Host $http_host;
        proxy_pass http://backend:8000/service2/;
    }

    location /auth {
        # Определяем, куда отправлять JWT для проверки в PDP
        internal;
        proxy_pass http://backend:8000/auth/;
        proxy_set_header Host $http_host;
        proxy_set_header Original-URI $request_uri;
        proxy_set_header Authorization "Bearer $http_authorization";
    }

    location /admin/ {
        proxy_pass http://backend:8000/admin/;
        proxy_set_header Host $http_host;
    }

    location / {
        alias /staticfiles/;
        index index.html;
    }

    location @unauthorized {
        # Действие при отказе доступа (код 401)
        return 401;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


